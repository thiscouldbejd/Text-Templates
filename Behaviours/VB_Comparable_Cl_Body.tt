<#@ template language="VB" hostspecific="True" #><#@ include file="%TEMPLATES_PATH%\Definitions\Class.tt" #><#@ include file="%TEMPLATES_PATH%\Definitions\Fields.tt" #>
<# Id(+0) #>#Region " IComparable Implementation "
<# Lf(+1) #>
<# Id(+1) #>#Region " Public Methods "
<# Lf(+1) #>
<# Id(+1) #><#= St("Comparison Method") #>
<# Id(+0) #>Public Overridable Function IComparable_CompareTo( _
<# Id(+1) #>ByVal value As System.Object _
<# Id(-1) #>) As System.Int32 Implements System.IComparable.CompareTo
<# Lf(+1) #>
<# Id(+1) #>Dim typed_Value As <#= Sn(Cl_Name) #> = TryCast(value, <#= Sn(Cl_Name) #>)
<# Lf(+1) #>
<# Id(+0) #>If typed_Value Is Nothing Then
<# Lf(+1) #>
<# Id(+1) #>Throw New ArgumentException(String.Format("Value is not of comparable type: {0}", value.GetType.Name), "Value")
<# Lf(+1) #>
<# Id(-1) #>Else
<# Lf(+1) #>
<# Id(+1) #>Dim return_Value As Integer = 0
<# Lf(+1) #><#If Not Fd_Comparable Is Nothing Then#><# For i As Integer = 0 To Ln(Fd_Comparable) - 1 #>
<# Id(+0) #><#= Null_Test(Fd_Comparable(i)) #>return_Value = <#= Comparable_Test(Fd_Comparable(i)) #>(typed_Value.<#= Sn(Fd_Comparable(i)) #>)
<# Id(+0) #>If return_Value <> 0 Then Return return_Value
<# Lf(+1) #><# Next #><# End If #>
<# Id(+0) #>Return return_Value
<# Lf(+1) #>
<# Id(-1) #>End If
<# Lf(+1) #>
<# Id(-1) #>End Function
<# Lf(+1) #>
<# Id(-1) #>#End Region
<# Lf(+1) #>
<# Id(-1) #>#End Region
<#+
	'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' TEMPLATE VARIABLES											'
	'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	Public Fd_Comparable As String()								' Names of the Comparable Fields
	'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

	'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	' TEMPLATE Methods												'
	'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
	Public Function Null_Test( _
		ByRef field_Name As String _
	) As String

		For Fd_Current = 0 To Ln(Fd_Names) - 1

			If field_Name.ToLower() = Fd_Name.ToLower() Then

				field_Name = Fd_Get
				Dim _field_Name As String = field_Name
				If _field_Name.ToLower() = "value" Then _field_Name = "Me." & _field_Name

				If Fd_ActualType Is Nothing OrElse (Fd_ActualType.IsValueType() = False AndAlso Fd_ActualType.IsEnum() = False) Then

					Return String.Format("If Not {0} Is Nothing Then ", _field_Name)

				Else

					Return String.Empty

				End If

			End If

		Next

		Throw New ArgumentException(String.Format("Comparable Field: {0} Not Listed as a Field!", field_Name), "field_Name")

	End Function

	Public Function Comparable_Test( _
		ByRef field_Name As String _
	) As String

		For Fd_Current = 0 To Ln(Fd_Names) - 1

			If field_Name.ToLower() = Fd_Name.ToLower() Then

				field_Name = Fd_Get
				Dim _field_Name As String = field_Name
				If _field_Name.ToLower() = "value" Then _field_Name = "Me." & _field_Name

				If Fd_ActualType Is Nothing OrElse (Not Fd_ActualType Is System.Type.GetType("System.String") AndAlso Fd_ActualType.IsValueType() = False AndAlso Fd_ActualType.IsEnum() = False) Then

					Return String.Format("DirectCast({0}, System.IComparable).CompareTo", _field_Name)
					
				Else

					Return String.Format("{0}.CompareTo", _field_Name)

				End If

			End If

		Next

		Throw New ArgumentException(String.Format("Comparable Field: {0} Not Listed as a Field!", field_Name), "field_Name")

	End Function
	''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' #>